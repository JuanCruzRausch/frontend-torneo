'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAppDispatch } from '../redux/hooks';
import { createTorneo, updateTorneo } from '../redux/slices/torneoSlice';
import type { Torneo } from '../redux/slices/torneoSlice';

const torneoSchema = z.object({
  nombre: z.string().min(1, 'El nombre es requerido').max(100, 'Máximo 100 caracteres'),
  descripcion: z.string().min(10, 'Mínimo 10 caracteres').max(500, 'Máximo 500 caracteres'),
  fechaInicio: z.string().min(1, 'La fecha de inicio es requerida'),
  fechaFin: z.string().min(1, 'La fecha de fin es requerida'),
  estado: z.enum(['activo', 'inactivo', 'finalizado', 'pendiente']),
  formato: z.string().optional(),
});

type TorneoFormData = z.infer<typeof torneoSchema>;

interface TorneoFormProps {
  torneo?: Torneo;
  onSuccess?: () => void;
  onCancel?: () => void;
}

export default function TorneoForm({ torneo, onSuccess, onCancel }: TorneoFormProps) {
  const dispatch = useAppDispatch();

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<TorneoFormData>({
    resolver: zodResolver(torneoSchema),
    defaultValues: torneo ? {
      nombre: torneo.nombre || '',
      descripcion: torneo.descripcion || '',
      fechaInicio: torneo.fechaInicio ? torneo.fechaInicio.split('T')[0] : '',
      fechaFin: torneo.fechaFin ? torneo.fechaFin.split('T')[0] : '',
      estado: torneo.estado || 'pendiente',
      formato: torneo.formato || 'zonas + eliminatorias',
    } : {
      estado: 'pendiente' as const,
      formato: 'zonas + eliminatorias',
    }
  });

  const handleFormSubmit = async (data: TorneoFormData) => {
    try {
      if (torneo) {
        await dispatch(updateTorneo({ id: torneo._id || torneo.id || '', ...data })).unwrap();
      } else {
        // For create, we need to format the data properly
        const createData = {
          _id: '', // This will be generated by the backend
          ...data,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };
        await dispatch(createTorneo(createData as any)).unwrap();
      }
      onSuccess?.();
    } catch (error) {
      console.error('Error al guardar torneo:', error);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md">
      <div className="px-6 py-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-900">
          {torneo ? 'Editar Torneo' : 'Crear Nuevo Torneo'}
        </h2>
      </div>

      <form onSubmit={handleSubmit(handleFormSubmit)} className="p-6 space-y-6">
        {/* Nombre */}
        <div>
          <label htmlFor="nombre" className="block text-sm font-medium text-gray-700 mb-2">
            Nombre del Torneo *
          </label>
          <input
            {...register('nombre')}
            type="text"
            id="nombre"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Ej: Copa Primavera 2024"
          />
          {errors.nombre && (
            <p className="mt-1 text-sm text-red-600">{errors.nombre.message}</p>
          )}
        </div>

        {/* Descripción */}
        <div>
          <label htmlFor="descripcion" className="block text-sm font-medium text-gray-700 mb-2">
            Descripción *
          </label>
          <textarea
            {...register('descripcion')}
            id="descripcion"
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Describe el torneo, categorías, premios, etc."
          />
          {errors.descripcion && (
            <p className="mt-1 text-sm text-red-600">{errors.descripcion.message}</p>
          )}
        </div>

        {/* Fechas */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="fechaInicio" className="block text-sm font-medium text-gray-700 mb-2">
              Fecha de Inicio *
            </label>
            <input
              {...register('fechaInicio')}
              type="date"
              id="fechaInicio"
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            {errors.fechaInicio && (
              <p className="mt-1 text-sm text-red-600">{errors.fechaInicio.message}</p>
            )}
          </div>

          <div>
            <label htmlFor="fechaFin" className="block text-sm font-medium text-gray-700 mb-2">
              Fecha de Fin *
            </label>
            <input
              {...register('fechaFin')}
              type="date"
              id="fechaFin"
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            {errors.fechaFin && (
              <p className="mt-1 text-sm text-red-600">{errors.fechaFin.message}</p>
            )}
          </div>
        </div>

        {/* Estado */}
        <div>
          <label htmlFor="estado" className="block text-sm font-medium text-gray-700 mb-2">
            Estado *
          </label>
          <select
            {...register('estado')}
            id="estado"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="pendiente">Pendiente</option>
            <option value="activo">Activo</option>
            <option value="inactivo">Inactivo</option>
            <option value="finalizado">Finalizado</option>
          </select>
          {errors.estado && (
            <p className="mt-1 text-sm text-red-600">{errors.estado.message}</p>
          )}
        </div>

        {/* Formato */}
        <div>
          <label htmlFor="formato" className="block text-sm font-medium text-gray-700 mb-2">
            Formato del Torneo
          </label>
          <select
            {...register('formato')}
            id="formato"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="zonas + eliminatorias">Zonas + Eliminatorias</option>
            <option value="eliminacion directa">Eliminación Directa</option>
            <option value="liga">Liga</option>
            <option value="grupos">Grupos</option>
          </select>
          {errors.formato && (
            <p className="mt-1 text-sm text-red-600">{errors.formato.message}</p>
          )}
        </div>



        {/* Buttons */}
        <div className="flex justify-end space-x-4 pt-6">
          {onCancel && (
            <button
              type="button"
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Cancelar
            </button>
          )}
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? (
              <div className="flex items-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Guardando...
              </div>
            ) : (
              torneo ? 'Actualizar Torneo' : 'Crear Torneo'
            )}
          </button>
        </div>
      </form>
    </div>
  );
} 